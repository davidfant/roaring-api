/**
 * This file was auto-generated by swagger-to-ts.
 * Do not make direct changes to the file.
 */

export interface definitions {
  Address: {
    foreignAddress?: definitions["ForeignAddress"][];
    nationalRegistrationAddress?: definitions["NationalRegistrationAddress"][];
    specialPostAddress?: definitions["SpecialPostAddress"][];
  };
  Details: {
    birthCongregation?: string;
    birthCountyCode?: string;
    birthDate?: string;
    dateFrom?: string;
    dateTo?: string;
    deRegistrationDate?: string;
    deRegistrationReason?: string;
    firstName?: string;
    gender?: string;
    givenName?: number;
    isSwedishCitizen?: boolean;
    middleName?: string;
    notificationName?: string;
    personalNumberChangedFrom?: string;
    personalNumberChangedTo?: string;
    secrecyMarked?: boolean;
    surName?: string;
  };
  ForeignAddress: {
    careOf?: string;
    city?: string;
    country?: string;
    dateFrom?: string;
    dateTo?: string;
    deliveryAddress1?: string;
    deliveryAddress2?: string;
    deliveryAddress3?: string;
    postalNumber?: string;
  };
  /**
   * The personal number was invalid
   */
  InvalidPersonalNumber: { error?: string; message?: string };
  NationalRegistrationAddress: {
    careOf?: string;
    city?: string;
    communeCode?: string;
    congregationCode?: string;
    countyCode?: string;
    dateFrom?: string;
    dateTo?: string;
    deliveryAddress1?: string;
    deliveryAddress2?: string;
    districtCode?: string;
    postalNumber?: string;
    registrationDate?: string;
  };
  /**
   * The provided Personal number did not match any records
   */
  NoRecordsFound: { error?: string; message?: string };
  /**
   * Roaring Apps representation of a person in a lookup. list contains all possible fields returned by either of the api verb calls
   */
  Person: {
    /**
     * Indication on if this is an active personal number
     */
    actualPersonalNumber?: boolean;
    address?: definitions["Address"];
    /**
     * Summed up income for the year expressed in taxationYear
     */
    aggregatedIncome?: string;
    /**
     * Person details like names and birthdate, includes dates for when the detailed information is valid
     */
    details?: definitions["Details"][];
    /**
     * Information on if there are any historical information available for this person. If 'true' you can get the historical data with the API; GET /personhistory.
     */
    hasHistory?: boolean;
    /**
     * Date for latest change in national registry
     */
    nationalRegistryChangeDate?: string;
    /**
     * The personal number identifying a person in Sweden
     */
    personalNumber?: string;
    /**
     * List of real estate owned by the person
     */
    realEstate?: definitions["RealEstate"][];
    /**
     * Information about persons that have a relation to this person
     */
    relation?: definitions["Relation"][];
    /**
     * Date for change of secrecy marking
     */
    secrecyChangeDate?: string;
    /**
     * The consumer's information is protected and will not be returned. Any previously stored information should be removed in compliance with local laws.
     */
    secrecyMarked?: boolean;
    /**
     * Taxation year (YYYY)
     */
    taxationYear?: string;
  };
  PersonLookupResponse: { posts?: definitions["Person"][] };
  RealEstate: {
    communeCode?: string;
    countyCode?: string;
    realEstateCode?: string;
    shareDenominator?: number;
    shareNumerator?: number;
    taxationValue?: string;
    taxationYear?: string;
  };
  Relation: {
    actualPersonalNumber?: boolean;
    birthDate?: string;
    dateFrom?: string;
    dateTo?: string;
    deRegistrationDate?: string;
    deRegistrationReason?: string;
    firstName?: string;
    middleName?: string;
    personalNumber?: string;
    relationType?: string;
    surName?: string;
  };
  SpecialPostAddress: {
    careOf?: string;
    city?: string;
    dateFrom?: string;
    dateTo?: string;
    deliveryAddress1?: string;
    deliveryAddress2?: string;
    postalNumber?: string;
  };
}
